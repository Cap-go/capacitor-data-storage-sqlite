{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface CapgoCapacitorDataStorageSqlitePlugin {\n  /**\n   *\n   * @param options: capEchoOptions\n   * @return Promise<capEchoResult>\n   * @since 0.0.1\n   */\n  echo(options: capEchoOptions): Promise<capEchoResult>;\n  /**\n   * Open a store\n   * @param options: capOpenStorageOptions\n   * @returns Promise<void>\n   * @since 0.0.1\n   */\n  openStore(options: capOpenStorageOptions): Promise<void>;\n  /**\n   * Close the Store\n   * @param options: capStorageOptions\n   * @returns Promise<void>\n   * @since 3.0.0\n   */\n  closeStore(options: capStorageOptions): Promise<void>;\n  /**\n   * Check if the Store is opened\n   * @param options: capStorageOptions\n   * @returns Promise<capDataStorageResult>\n   * @since 3.0.0\n   */\n  isStoreOpen(options: capStorageOptions): Promise<capDataStorageResult>;\n  /**\n   * Check if the Store exists\n   * @param options: capStorageOptions\n   * @returns Promise<capDataStorageResult>\n   * @since 3.0.0\n   */\n  isStoreExists(options: capStorageOptions): Promise<capDataStorageResult>;\n  /**\n   * Delete a store\n   * @param options: capOpenStorageOptions\n   * @returns Promise<void>\n   * @since 0.0.1\n   */\n  deleteStore(options: capOpenStorageOptions): Promise<void>;\n  /**\n   * Set or Add a table to an existing store\n   * @param options: capTableStorageOptions\n   * @returns Promise<void>\n   * @since 0.0.1\n   */\n  setTable(options: capTableStorageOptions): Promise<void>;\n  /**\n   * Store a data with given key and value\n   * @param options: capDataStorageOptions\n   * @returns Promise<void>\n   * @since 0.0.1\n   */\n  set(options: capDataStorageOptions): Promise<void>;\n  /**\n   * Retrieve a data value for a given data key\n   * @param options: capDataStorageOptions\n   * @returns Promise<capValueResult>\n   * @since 0.0.1\n   */\n  get(options: capDataStorageOptions): Promise<capValueResult>;\n  /**\n   * Remove a data with given key\n   * @param options: capDataStorageOptions\n   * @returns Promise<void>\n   * @since 0.0.1\n   */\n  remove(options: capDataStorageOptions): Promise<void>;\n  /**\n   * Clear the Data Store (delete all keys)\n   * @returns Promise<void>\n   * @since 0.0.1\n   */\n  clear(): Promise<void>;\n  /**\n   * Check if a data key exists\n   * @param options: capDataStorageOptions\n   * @returns Promise<capDataStorageResult>\n   * @since 0.0.1\n   */\n  iskey(options: capDataStorageOptions): Promise<capDataStorageResult>;\n  /**\n   * Get the data key list\n   * @returns Promise<capKeysResult>\n   * @since 0.0.1\n   */\n  keys(): Promise<capKeysResult>;\n  /**\n   * Get the data value list\n   * @returns Promise<capValuesResult>\n   * @since 0.0.1\n   */\n  values(): Promise<capValuesResult>;\n  /**\n   * Get the data value list for filter keys\n   * @param options: capFilterStorageOptions\n   * @returns Promise<capValuesResult>\n   * @since 2.4.2\n   */\n  filtervalues(options: capFilterStorageOptions): Promise<capValuesResult>;\n  /**\n   * Get the data key/value pair list\n   * @returns Promise<capKeysValuesResult>\n   * @since 0.0.1\n   */\n  keysvalues(): Promise<capKeysValuesResult>;\n  /**\n   * Check if a table exists\n   * @param options: capTableStorageOptions\n   * @returns Promise<capDataStorageResult>\n   * @since 3.0.0\n   */\n  isTable(options: capTableStorageOptions): Promise<capDataStorageResult>;\n  /**\n   * Get the table list for the current store\n   * @returns Promise<capTablesResult>\n   * @since 3.0.0\n   */\n  tables(): Promise<capTablesResult>;\n  /**\n   * Delete a table\n   * @param options: capTableStorageOptions\n   * @returns Promise<void>\n   * @since 3.0.0\n   */\n  deleteTable(options: capTableStorageOptions): Promise<void>;\n  /**\n   * Import a database From a JSON\n   * @param jsonstring string\n   * @returns Promise<capDataStorageChanges>\n   * @since 3.2.0\n   */\n  importFromJson(\n    options: capStoreImportOptions,\n  ): Promise<capDataStorageChanges>;\n  /**\n   * Check the validity of a JSON Object\n   * @param jsonstring string\n   * @returns Promise<capDataStorageResult>\n   * @since 3.2.0\n   */\n  isJsonValid(options: capStoreImportOptions): Promise<capDataStorageResult>;\n  /**\n   * Export the given database to a JSON Object\n   * @returns Promise<capStoreJson>\n   * @since 3.2.0\n   */\n  exportToJson(): Promise<capStoreJson>;\n}\n\nexport interface capEchoOptions {\n  /**\n   *  String to be echoed\n   */\n  value?: string;\n}\n\nexport interface capOpenStorageOptions {\n  /**\n   * The storage database name\n   */\n  database?: string; // default:\n  //  ios, android: storageSQLite\n  //  web : storageIDB\n  /**\n   * The storage table name\n   */\n  table?: string; // default:\n  //  ios, android: storage_table\n  //  web: storage_store\n  /**\n   * Set to true for database encryption\n   */\n  encrypted?: boolean; // only for ios and android\n  /***\n   * Set the mode for database encryption\n   * [\"encryption\", \"secret\",\"newsecret\"]\n   */\n  mode?: string; // only for ios and android\n}\nexport interface capDataStorageOptions {\n  /**\n   * The data name\n   */\n  key: string;\n  /**\n   * The data value when required\n   */\n  value?: string;\n}\nexport interface capStorageOptions {\n  /**\n   * The storage name\n   */\n  database: string;\n}\n\nexport interface capTableStorageOptions {\n  /**\n   * The storage table name\n   */\n  table: string;\n}\nexport interface capFilterStorageOptions {\n  /**\n   * The filter data for filtering keys\n   *\n   * ['%filter', 'filter', 'filter%'] for\n   * [starts with filter, contains filter, ends with filter]\n   */\n  filter: string;\n}\n\nexport interface capEchoResult {\n  /**\n   * String returned\n   */\n  value: string;\n}\n\nexport interface capDataStorageResult {\n  /**\n   * result set to true when successful else false\n   */\n  result?: boolean;\n  /**\n   * a returned message\n   */\n  message?: string;\n}\nexport interface capValueResult {\n  /**\n   * the data value for a given data key\n   */\n  value: string;\n}\nexport interface capKeysResult {\n  /**\n   * the data key list as an Array\n   */\n  keys: string[];\n}\nexport interface capValuesResult {\n  /**\n   * the data values list as an Array\n   */\n  values: string[];\n}\nexport interface capKeysValuesResult {\n  /**\n   * the data keys/values list as an Array of {key:string,value:string}\n   */\n  keysvalues: any[];\n}\nexport interface capTablesResult {\n  /**\n   * the tables list as an Array\n   */\n  tables: string[];\n}\nexport interface JsonStore {\n  /**\n   * The database name\n   */\n  database: string;\n  /**\n   * Set to true (database encryption) / false\n   * iOS & Android only\n   */\n  encrypted: boolean;\n  /***\n   * Array of Table (JsonTable)\n   */\n  tables: JsonTable[];\n}\nexport interface JsonTable {\n  /**\n   * The database name\n   */\n  name: string;\n  /***\n   * Array of Values (capDataStorageOptions)\n   */\n  values?: capDataStorageOptions[];\n}\n\nexport interface capDataStorageChanges {\n  /**\n   * the number of changes from an importFromJson command\n   */\n  changes?: number;\n}\nexport interface capStoreImportOptions {\n  /**\n   * Set the JSON object to import\n   *\n   */\n  jsonstring?: string;\n}\nexport interface capStoreJson {\n  /**\n   * an export JSON object\n   */\n  export?: JsonStore;\n}\n"]}