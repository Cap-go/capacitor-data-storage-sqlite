import idb from './idb';

function isIndexedDBValid() {
    try {
        // Initialize IndexedDB; fall back to vendor-prefixed versions
        // if needed.
        if (!idb) {
            return false;
        }
        /* Modified by JPQ as it doesn't work on chrome development tools
        // We mimic PouchDB here;
        //
        // We test for openDatabase because IE Mobile identifies itself
        // as Safari. Oh the lulz...
        var isSafari =
            typeof openDatabase !== 'undefined' &&
            /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) &&
            !/Chrome/.test(navigator.userAgent) &&
            !/BlackBerry/.test(navigator.platform);

        var hasFetch =
            typeof fetch === 'function' &&
            fetch.toString().indexOf('[native code') !== -1;

        // Safari <10.1 does not meet our requirements for IDB support
        // (see: https://github.com/pouchdb/pouchdb/issues/5572).
        // Safari 10.1 shipped with fetch, we can use that to detect it.
        // Note: this creates issues with `window.fetch` polyfills and
        // overrides; see:
        // https://github.com/localForage/localForage/issues/856
        return (
            (!isSafari || hasFetch) &&
            typeof indexedDB !== 'undefined' &&
            // some outdated implementations of IDB that appear on Samsung
            // and HTC Android devices <4.4 are missing IDBKeyRange
            // See: https://github.com/mozilla/localForage/issues/128
            // See: https://github.com/mozilla/localForage/issues/272
            typeof IDBKeyRange !== 'undefined'
        );
        */
       var retValue = false;
       var isApple =  /(Macintosh|iPhone|iPad|iPod)/.test(navigator.userAgent);
       if (isApple) {
           var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/Firefox/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform) && !/Android/.test(navigator.userAgent);
           var isVersion = /(Version)/.test(navigator.userAgent);
           if (isSafari && isVersion) {
               var versionString = navigator.userAgent.substring(navigator.userAgent.indexOf('Version/'));
               versionString = versionString.substring(0,versionString.indexOf(' ')).replace('Version/','');
               var versionArray = versionString.split('.');
               var version = Number(versionArray[0]);
               var subversion = versionArray.length > 1 ? Number(versionArray[1]) : -1;
               if ((version === 10 && subversion >= 1) || version > 10)  {
                   retValue = true;
               } 
           } else {
               retValue = !isSafari && typeof indexedDB !== 'undefined' && typeof IDBKeyRange !== 'undefined';
           }
       } else {
           if ( typeof indexedDB !== 'undefined' && typeof IDBKeyRange !== 'undefined') {
               retValue  = true;
           }
       }
       return retValue;

    } catch (e) {
        return false;
    }
}

export default isIndexedDBValid;
